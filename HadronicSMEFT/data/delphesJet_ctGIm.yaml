#Out[2]: '(nrecoLep>=1)&&(recoLep_pt[0]>25)&&Sum$(recoLep_pt>25)<=1&&delphesJet_pt>=500&&delphesJet_dR_hadTop_maxq1q2b<0.8&&nrecoJet>=4&&nBTag>=1'

selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (nrecoLep>=1) & (delphesJet_pt >= 500) & (delphesJet_dR_hadTop_maxq1q2b < 0.8) & (nrecoJet >= 4) #& (nBTag >= 1)
test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   #(genJet_pt>300) & (genJet_pt<2500) & (genJet_nConstituents>0)
   (nrecoLep>=1) & (delphesJet_pt >= 500) & (delphesJet_dR_hadTop_maxq1q2b < 0.8) & (nrecoJet >= 4) #& (nBTag >= 1)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   eflow_const_mask: awkward.JaggedArray.ones_like(eflow_etarel)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   global_features:
      length: 1
      vars:
         - parton_lepTop_pt
#         - parton_lepTop_eta
         - parton_lepTop_phi
         - parton_lepTop_lep_pt
         - parton_lepTop_lep_eta
         - parton_lepTop_lep_phi
         - parton_lepTop_nu_pt
         - parton_lepTop_nu_phi
         - parton_lepTop_b_pt
         - parton_lepTop_b_eta
         - parton_lepTop_b_phi
         - parton_lepTop_W_pt
#         - parton_lepTop_W_eta
         - parton_lepTop_W_phi
#         - parton_nu_eta
         - delphesJet_pt
         - delphesJet_eta
         - delphesJet_phi
#         - delphesJet_nConstituents
         - delphesJet_SDmass
         - delphesJet_SDsubjet0_deltaEta
         - delphesJet_SDsubjet0_deltaPhi
         - delphesJet_SDsubjet0_deltaR
         - delphesJet_SDsubjet0_mass
         - delphesJet_SDsubjet1_deltaEta
         - delphesJet_SDsubjet1_deltaPhi
         - delphesJet_SDsubjet1_deltaR
         - delphesJet_SDsubjet1_mass
         - delphesJet_tau1
         - delphesJet_tau2
         - delphesJet_tau3
         - delphesJet_tau4
         - delphesJet_tau21
         - delphesJet_tau32
         - delphesJet_ecf1
         - delphesJet_ecf2
         - delphesJet_ecf3
         - delphesJet_ecfC1
         - delphesJet_ecfC2
         - delphesJet_ecfC3
         - delphesJet_ecfD
         - delphesJet_ecfDbeta2
         - delphesJet_ecfM1
         - delphesJet_ecfM2
         - delphesJet_ecfM3
         - delphesJet_ecfM1beta2
         - delphesJet_ecfM2beta2
         - delphesJet_ecfM3beta2
         - delphesJet_ecfN1
         - delphesJet_ecfN2
         - delphesJet_ecfN3
         - delphesJet_ecfN1beta2
         - delphesJet_ecfN2beta2
         - delphesJet_ecfN3beta2
         - delphesJet_ecfU1
         - delphesJet_ecfU2
         - delphesJet_ecfU3
         - delphesJet_ecfU1beta2
         - delphesJet_ecfU2beta2
         - delphesJet_ecfU3beta2

   constituents_points:
      length: 200
      vars: 
         - eflow_etarel
         - eflow_phirel
   eflow_features:
      length: 200
      vars: 
         - eflow_etarel
         - eflow_phirel
         - eflow_charge
         - eflow_pt
         - eflow_eta
         - eflow_phi
         - eflow_type
         - eflow_cos_phi_lab
         - eflow_abs_delta_phi_ll_lab
         - eflow_cosTheta_n 
         - eflow_cosTheta_r 
         - eflow_cosTheta_k 
         - eflow_cosTheta_r_star
         - eflow_cosTheta_k_star
         - eflow_xi_nn
         - eflow_xi_rr
         - eflow_xi_kk
         - eflow_xi_nr_plus 
         - eflow_xi_nr_minus
         - eflow_xi_rk_plus 
         - eflow_xi_rk_minus
         - eflow_xi_nk_plus 
         - eflow_xi_nk_minus
         - eflow_cos_phi
   eflow_mask:
      length: 200
      vars: 
         - eflow_const_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_eflow_mass) 
   type: custom
   value:
        ctGIm_coeffs : ctGIm_coeff

observers:
   - parton_lepTop_pt
#       - parton_lepTop_eta
   - parton_lepTop_phi
   - parton_lepTop_lep_pt
   - parton_lepTop_lep_eta
   - parton_lepTop_lep_phi
   - parton_lepTop_nu_pt
   - parton_lepTop_nu_phi
   - parton_lepTop_b_pt
   - parton_lepTop_b_eta
   - parton_lepTop_b_phi
   - parton_lepTop_W_pt
#       - parton_lepTop_W_eta
   - parton_lepTop_W_phi
#       - parton_nu_eta
   - delphesJet_pt
   - delphesJet_eta
   - delphesJet_phi
#       - delphesJet_nConstituents
   - delphesJet_SDmass
   - delphesJet_SDsubjet0_deltaEta
   - delphesJet_SDsubjet0_deltaPhi
   - delphesJet_SDsubjet0_deltaR
   - delphesJet_SDsubjet0_mass
   - delphesJet_SDsubjet1_deltaEta
   - delphesJet_SDsubjet1_deltaPhi
   - delphesJet_SDsubjet1_deltaR
   - delphesJet_SDsubjet1_mass
   - delphesJet_tau1
   - delphesJet_tau2
   - delphesJet_tau3
   - delphesJet_tau4
   - delphesJet_tau21
   - delphesJet_tau32
   - delphesJet_ecf1
   - delphesJet_ecf2
   - delphesJet_ecf3
   - delphesJet_ecfC1
   - delphesJet_ecfC2
   - delphesJet_ecfC3
   - delphesJet_ecfD
   - delphesJet_ecfDbeta2
   - delphesJet_ecfM1
   - delphesJet_ecfM2
   - delphesJet_ecfM3
   - delphesJet_ecfM1beta2
   - delphesJet_ecfM2beta2
   - delphesJet_ecfM3beta2
   - delphesJet_ecfN1
   - delphesJet_ecfN2
   - delphesJet_ecfN3
   - delphesJet_ecfN1beta2
   - delphesJet_ecfN2beta2
   - delphesJet_ecfN3beta2
   - delphesJet_ecfU1
   - delphesJet_ecfU2
   - delphesJet_ecfU3
   - delphesJet_ecfU1beta2
   - delphesJet_ecfU2beta2
   - delphesJet_ecfU3beta2
   - p_C
#weights:
   #### [option 1] use precomputed weights stored in the input files
   ## use_precomputed_weights: true
   ## weight_branches: [weight, class_weight]
   #### [option 2] compute weights on-the-fly using reweighting histograms
   #use_precomputed_weights: false
   #reweight_method: flat
   #reweight_vars:
   #   genJet_pt: [300, 500, 800, 10000] #251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
   #   genJet_eta: [-10., 10.]
   #reweight_classes: [
   #   label_quad_0, label_quad_1, label_quad_2, label_quad_3
   #   ]
   #class_weights: [
   #   1, 1, 1, 1
   #   ]
   #reweight_hists:

