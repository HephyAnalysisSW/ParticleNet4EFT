selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (genJet_pt>300) & (genJet_pt<2500) & (genJet_nConstituents>0) 

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (genJet_pt>300) & (genJet_pt<2500) & (genJet_nConstituents>0)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   chh_mask: awkward.JaggedArray.ones_like(chh_etarel)
   neh_mask: awkward.JaggedArray.ones_like(neh_etarel)
   el_mask: awkward.JaggedArray.ones_like(e_etarel)
   mu_mask: awkward.JaggedArray.ones_like(mu_etarel)
   ph_mask: awkward.JaggedArray.ones_like(ph_etarel)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   chh_points:
      length: 50
      vars: 
         - chh_etarel
         - chh_phirel
   chh_features:
      length: 50
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - chh_etarel
         - chh_phirel
         - chh_pt
         - chh_charge
   chh_mask:
      length: 50
      vars: 
         - chh_mask

   neh_points:
      length: 20
      vars:
         - neh_etarel
         - neh_phirel
   neh_features:
      length: 20
      vars:
         - neh_etarel
         - neh_phirel
         - neh_pt
   neh_mask:
      length: 20
      vars:
         - neh_mask

   el_points:
      length: 5
      vars:
         - e_etarel 
         - e_phirel
   el_features:
      length: 5
      vars:
         - e_etarel
         - e_phirel
         - e_pt
         - e_charge
   el_mask:
      length: 5
      vars:
         - el_mask
 
   mu_points:
      length: 5
      vars:
         - mu_etarel
         - mu_phirel
   mu_features:
      length: 5
      vars:
         - mu_etarel
         - mu_phirel
         - mu_pt
         - mu_charge
   mu_mask:
      length: 5
      vars:
         - mu_mask

   ph_points:
      length: 50
      vars:
         - ph_etarel
         - ph_phirel
   ph_features:
      length: 50
      vars:
         - ph_etarel
         - ph_phirel
         - ph_pt
   ph_mask:
      length: 50
      vars:
         - ph_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 
   type: custom
   value:
        theta : gen_theta 

observers:
   - genJet_pt
   - genJet_eta
   - genJet_phi
   - genJet_nConstituents
   - partonTop_pt

weights:
   #### [option 1] use precomputed weights stored in the input files
   ## use_precomputed_weights: true
   ## weight_branches: [weight, class_weight]
   #### [option 2] compute weights on-the-fly using reweighting histograms
   #use_precomputed_weights: false
   #reweight_method: flat
   #reweight_vars:
   #   genJet_pt: [300, 500, 800, 10000] #251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
   #   genJet_eta: [-10., 10.]
   #reweight_classes: [
   #   label_quad_0, label_quad_1, label_quad_2, label_quad_3
   #   ]
   #class_weights: [
   #   1, 1, 1, 1
   #   ]
   #reweight_hists:

