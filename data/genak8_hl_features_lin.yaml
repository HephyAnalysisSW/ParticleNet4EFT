selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (genJet_pt>500) & (genJet_SDmass>0) & (np.abs(dR_genJet_maxQ1Q2b)<0.6) & (genJet_SDsubjet1_mass>=0) 

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (genJet_pt>500) & (genJet_SDmass>0) & (np.abs(dR_genJet_maxQ1Q2b)<0.6) & (genJet_SDsubjet1_mass>=0)


preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   hl_features:
      length: 1
      vars: 
         - genJet_pt
         - genJet_mass
         - genJet_nConstituents
         - genJet_SDmass
         - genJet_SDsubjet0_deltaEta
         - genJet_SDsubjet0_deltaPhi
         - genJet_SDsubjet0_deltaR
         - genJet_SDsubjet0_mass
         - genJet_SDsubjet1_deltaEta
         - genJet_SDsubjet1_deltaPhi
         - genJet_SDsubjet1_deltaR
         - genJet_SDsubjet1_mass
         - genJet_tau1
         - genJet_tau2
         - genJet_tau3
         - genJet_tau4
         - genJet_tau21
         - genJet_tau32
         - genJet_ecf1
         - genJet_ecf2
         - genJet_ecf3
         - genJet_ecfC1
         - genJet_ecfC2
         - genJet_ecfC3
         - genJet_ecfD
         - genJet_ecfDbeta2
         - genJet_ecfM1
         - genJet_ecfM2
         - genJet_ecfM3
         - genJet_ecfM1beta2
         - genJet_ecfM2beta2
         - genJet_ecfM3beta2
         - genJet_ecfN1
         - genJet_ecfN2
         - genJet_ecfN3
         - genJet_ecfN1beta2
         - genJet_ecfN2beta2
         - genJet_ecfN3beta2
         - genJet_ecfU1
         - genJet_ecfU2
         - genJet_ecfU3
         - genJet_ecfU1beta2
         - genJet_ecfU2beta2
         - genJet_ecfU3beta2

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   type: custom
   value:
        lin_ctWRe : target_ctWRe

observers:
   

weights:
   #### [option 1] use precomputed weights stored in the input files
   ## use_precomputed_weights: true
   ## weight_branches: [weight, class_weight]
   #### [option 2] compute weights on-the-fly using reweighting histograms
   #use_precomputed_weights: false
   #reweight_method: flat
   #reweight_vars:
   #   genJet_pt: [300, 500, 800, 10000] #251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
   #   genJet_eta: [-10., 10.]
   #reweight_classes: [
   #   label_quad_0, label_quad_1, label_quad_2, label_quad_3
   #   ]
   #class_weights: [
   #   1, 1, 1, 1
   #   ]
   #reweight_hists:

